package view

import (
	"fmt"
	"github.com/tjanas94/vibefeeder/internal/feed/models"
	"github.com/tjanas94/vibefeeder/internal/shared/view/components"
)

// List renders the feed list results (without search filter).
// Search filter is in dashboard/view/index.templ to prevent re-rendering and focus loss.
templ List(vm models.FeedListViewModel) {
	<!-- Conditional rendering: Error state, Empty state, No results, or Feed list -->
	if vm.ErrorMessage != "" {
		<div role="alert" aria-live="assertive">
			@components.EmptyState(components.EmptyStateProps{
				Icon:        "‚ö†Ô∏è",
				Title:       "Failed to load feeds",
				Description: vm.ErrorMessage,
			})
		</div>
	} else if vm.ShowEmptyState {
		<div role="status" aria-live="polite">
			@components.EmptyState(components.EmptyStateProps{
				Icon:        "üì°",
				Title:       "You don't have any feeds yet",
				Description: "Add your first RSS feed to start reading articles",
				ActionText:  "Add first feed",
				ActionAttrs: templ.Attributes{
					"@click":     "lastFocusedElement = $event.target",
					"hx-get":     "/feeds/new",
					"hx-target":  "#feed-form-modal-content",
					"hx-trigger": "click",
				},
			})
		</div>
	} else if len(vm.Feeds) == 0 {
		<!-- No results found after filtering -->
		<div role="status" aria-live="polite">
			@components.EmptyState(components.EmptyStateProps{
				Icon:        "üîç",
				Title:       "No feeds found",
				Description: "Try adjusting your search or filters",
			})
		</div>
	} else {
		<!-- Feed List: Desktop Table, Mobile Cards -->
		<!-- Desktop Table (hidden on mobile) -->
		<div class="hidden sm:block overflow-x-auto">
			<table class="table table-zebra w-full" aria-label="RSS feed list">
				<caption class="sr-only">
					RSS feed list with edit and delete actions
				</caption>
				<thead>
					<tr>
						<th scope="col">Name</th>
						<th scope="col">URL</th>
						<th scope="col">Status</th>
						<th scope="col" class="text-right w-32">Actions</th>
					</tr>
				</thead>
				<tbody>
					for _, feed := range vm.Feeds {
						@FeedListItem(feed)
					}
				</tbody>
			</table>
		</div>
		<!-- Mobile Cards (visible only on mobile) -->
		<div class="sm:hidden space-y-4">
			for _, feed := range vm.Feeds {
				@FeedCard(feed)
			}
		</div>
		<!-- Pagination -->
		if vm.Pagination.TotalPages > 1 {
			@components.Pagination(components.PaginationProps{
				Pagination: vm.Pagination,
				BaseURL:    "/feeds",
				FormID:     "#feed-filter-form",
			})
		}
	}
}

// FeedSearchFilter renders the search input and status filter buttons.
// Uses native form values - no Alpine state needed, htmx serializes the form.
templ FeedSearchFilter(props FeedSearchFilterProps) {
	<form
		id="feed-filter-form"
		class="relative space-y-4"
		hx-get="/feeds"
		hx-target="#feed-list"
		hx-trigger="change from:input[type=radio], keyup changed delay:500ms from:input[type=search], search from:input[type=search], refreshFeedList from:document"
		role="search"
		aria-label="Search and filter feeds"
		data-testid="feed-filter-form"
	>
		<!-- Filter fields wrapper -->
		<div class="flex flex-col sm:flex-row gap-4 items-stretch">
			<!-- Search Input -->
			<label for="feed-search" class="sr-only">Search feeds by name</label>
			<input
				id="feed-search"
				type="search"
				name="search"
				placeholder="Search by name..."
				class="input input-bordered w-full sm:grow"
				value={ props.Search }
				aria-label="Search feeds by name"
				data-testid="feed-search-input"
			/>
			<!-- Status Filter Radio Buttons (styled as buttons) -->
			@components.StatusFilterGroup(components.StatusFilterGroupProps{
				Name:          "status",
				Options:       []string{"all", "working", "pending", "error"},
				SelectedValue: props.Status,
			})
		</div>
		<!-- Loading indicator below filters - absolute positioned to prevent layout shift -->
		<div class="htmx-indicator absolute left-1/2 -translate-x-1/2 top-[calc(100%+1.5rem)] flex items-center justify-center gap-2 z-10">
			<span class="loading loading-spinner loading-sm" aria-hidden="true"></span>
			<span class="text-sm font-medium">Loading...</span>
		</div>
	</form>
}

// FeedListItem renders a single feed row in the table
templ FeedListItem(feed models.FeedItemViewModel) {
	<tr data-testid={ fmt.Sprintf("feed-list-item-%s", feed.ID) }>
		<!-- Feed Name -->
		<th scope="row" class="font-medium" data-testid={ fmt.Sprintf("feed-name-%s", feed.ID) }>{ feed.Name }</th>
		<!-- Feed URL -->
		<td class="text-sm text-base-content/70 max-w-md truncate" data-testid={ fmt.Sprintf("feed-url-%s", feed.ID) }>
			<span title={ feed.URL }>{ feed.URL }</span>
		</td>
		<!-- Status with Error Tooltip -->
		<td data-testid={ fmt.Sprintf("feed-status-%s", feed.ID) }>
			if feed.HasError {
				@components.Badge(components.BadgeProps{
					Text:    "Error",
					Type:    "error",
					Icon:    "‚ùå",
					Tooltip: feed.ErrorMessage,
				})
			} else if feed.LastFetchedAt.IsZero() {
				@components.Badge(components.BadgeProps{
					Text: "Pending",
					Type: "warning",
					Icon: "‚è≥",
				})
			} else {
				@components.Badge(components.BadgeProps{
					Text: "OK",
					Type: "success",
					Icon: "‚úÖ",
				})
			}
		</td>
		<!-- Actions -->
		<td class="text-right w-32">
			<div class="flex gap-2 justify-end" role="group" aria-label="Actions for this feed">
				<!-- Edit Button -->
				@components.Tooltip(components.TooltipProps{
					Text:     "Edit feed",
					Position: "left",
				}) {
					<button
						type="button"
						class="btn btn-sm btn-ghost relative"
						@click="lastFocusedElement = $event.target"
						hx-get={ fmt.Sprintf("/feeds/%s/edit", feed.ID) }
						hx-target="#feed-form-modal-content"
						hx-trigger="click"
						aria-label={ fmt.Sprintf("Edit feed %s", feed.Name) }
						data-testid={ fmt.Sprintf("feed-edit-btn-%s", feed.ID) }
					>
						<span class="absolute -left-2 top-1/2 -translate-y-1/2">
							@components.ButtonLoader(components.ButtonLoaderProps{Size: "sm"})
						</span>
						<span aria-hidden="true">‚úèÔ∏è</span>
					</button>
				}
				<!-- Delete Button -->
				@components.Tooltip(components.TooltipProps{
					Text:     "Delete feed",
					Position: "left",
				}) {
					<button
						type="button"
						class="btn btn-sm btn-ghost text-error relative"
						@click="lastFocusedElement = $event.target"
						hx-get={ fmt.Sprintf("/feeds/%s/delete", feed.ID) }
						hx-target="#delete-confirmation-modal-content"
						hx-trigger="click"
						aria-label={ fmt.Sprintf("Delete feed %s", feed.Name) }
						data-testid={ fmt.Sprintf("feed-delete-btn-%s", feed.ID) }
					>
						<span class="absolute -left-2 top-1/2 -translate-y-1/2">
							@components.ButtonLoader(components.ButtonLoaderProps{Size: "sm"})
						</span>
						<span aria-hidden="true">üóëÔ∏è</span>
					</button>
				}
			</div>
		</td>
	</tr>
}

// FeedCard renders a single feed as a card for mobile view
templ FeedCard(feed models.FeedItemViewModel) {
	<div class="card bg-base-200 shadow-md" data-testid={ fmt.Sprintf("feed-card-%s", feed.ID) }>
		<div class="card-body p-4">
			<!-- Header: Name and Status -->
			<div class="flex items-start justify-between gap-2 mb-2">
				<h2 class="card-title text-base" data-testid={ fmt.Sprintf("feed-name-%s", feed.ID) }>{ feed.Name }</h2>
				<div class="flex-shrink-0" data-testid={ fmt.Sprintf("feed-status-%s", feed.ID) }>
					if feed.HasError {
						@components.Badge(components.BadgeProps{
							Text:    "Error",
							Type:    "error",
							Icon:    "‚ùå",
							Tooltip: feed.ErrorMessage,
						})
					} else if feed.LastFetchedAt.IsZero() {
						@components.Badge(components.BadgeProps{
							Text: "Pending",
							Type: "warning",
							Icon: "‚è≥",
						})
					} else {
						@components.Badge(components.BadgeProps{
							Text: "OK",
							Type: "success",
							Icon: "‚úÖ",
						})
					}
				</div>
			</div>
			<!-- URL -->
			<p class="text-sm text-base-content/70 break-all mb-3" data-testid={ fmt.Sprintf("feed-url-%s", feed.ID) }>{ feed.URL }</p>
			<!-- Actions -->
			<div class="card-actions justify-end">
				<button
					type="button"
					class="btn btn-sm btn-ghost relative"
					@click="lastFocusedElement = $event.target"
					hx-get={ fmt.Sprintf("/feeds/%s/edit", feed.ID) }
					hx-target="#feed-form-modal-content"
					hx-trigger="click"
					aria-label={ fmt.Sprintf("Edit feed %s", feed.Name) }
					data-testid={ fmt.Sprintf("feed-edit-btn-%s", feed.ID) }
				>
					<span class="absolute -left-2 top-1/2 -translate-y-1/2">
						@components.ButtonLoader(components.ButtonLoaderProps{Size: "sm"})
					</span>
					<span aria-hidden="true">‚úèÔ∏è</span>
					<span>Edit</span>
				</button>
				<button
					type="button"
					class="btn btn-sm btn-ghost text-error relative"
					@click="lastFocusedElement = $event.target"
					hx-get={ fmt.Sprintf("/feeds/%s/delete", feed.ID) }
					hx-target="#delete-confirmation-modal-content"
					hx-trigger="click"
					aria-label={ fmt.Sprintf("Delete feed %s", feed.Name) }
					data-testid={ fmt.Sprintf("feed-delete-btn-%s", feed.ID) }
				>
					<span class="absolute -left-2 top-1/2 -translate-y-1/2">
						@components.ButtonLoader(components.ButtonLoaderProps{Size: "sm"})
					</span>
					<span aria-hidden="true">üóëÔ∏è</span>
					<span>Delete</span>
				</button>
			</div>
		</div>
	</div>
}
