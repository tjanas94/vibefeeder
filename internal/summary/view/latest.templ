package view

import (
	"fmt"
	"html"
	"time"

	"github.com/tjanas94/vibefeeder/internal/shared/view/components"
	"github.com/tjanas94/vibefeeder/internal/summary/models"
)

// Summary modal view fragments: Display, Content, EmptyState, LoadingState, Error.
// The modal container itself is provided by components.Modal; handlers render
// Display (normal flow) or Error (domain failure) directly.

// =======================
// Generate Summary Action
// =======================
//
// Renders a form with submit button and loader for generating summaries.
// Reusable across Content, EmptyState, and Error states.
templ GenerateSummaryAction(props GenerateSummaryActionProps) {
	<form
		hx-post="/summaries"
		hx-target="#summary-modal-content"
		hx-swap="innerHTML"
		class="inline-flex items-center gap-2 min-h-[2.75rem]"
	>
		<button
			type="submit"
			class={ "btn btn-primary hide-during-request", props.ButtonSize }
			aria-label={ props.AriaLabel }
		>
			{ props.ButtonText }
		</button>
		@components.ReplaceLoader(components.ReplaceLoaderProps{
			Message: "Generating your summary...",
		})
	</form>
}

// =======================
// Display Orchestrator
// =======================
//
// Decides which state to render based on the SummaryDisplayViewModel.
// Priority:
// 1. If Summary present -> Content
// 2. Else -> EmptyState
templ Display(vm models.SummaryDisplayViewModel) {
	<!-- Root container for summary display -->
	<section
		aria-labelledby="summary-modal-title"
		aria-live="polite"
		class="space-y-4"
	>
		<h3 id="summary-modal-title" tabindex="-1" class="font-bold text-xl">
			Daily Summary
		</h3>
		if vm.ErrorMessage != "" {
			@Error(models.SummaryErrorViewModel{ErrorMessage: vm.ErrorMessage})
		} else if vm.Summary != nil {
			@Content(ContentProps{
				Summary:     *vm.Summary,
				CanGenerate: vm.CanGenerate,
			})
		} else {
			@EmptyState(EmptyStateProps{CanGenerate: vm.CanGenerate})
		}
	</section>
}

// =============
// Content State
// =============
//
// Renders the existing summary content and metadata.
// Shows "Generate New Summary" if the user can generate another summary.
templ Content(props ContentProps) {
	<article class="prose max-w-none" aria-label="AI generated summary">
		<p class="text-sm text-base-content/70 mb-4">
			Generated at
			<time datetime={ props.Summary.CreatedAt.Format(time.RFC3339) }>
				{ props.Summary.CreatedAt.Local().Format("Jan 2, 2006 15:04") }
			</time>
		</p>
		<div class="whitespace-pre-line leading-relaxed text-base">
			{ sanitizeSummaryContent(props.Summary.Content) }
		</div>
	</article>
	<div class="flex items-center justify-between mt-6 gap-4 flex-wrap">
		<div class="text-xs text-base-content/60">
			Summaries are generated from your feeds' articles from the last 24 hours.
		</div>
		if props.CanGenerate {
			@GenerateSummaryAction(GenerateSummaryActionProps{
				ButtonText: "Generate New Summary",
				AriaLabel:  "Generate a new AI summary from the last 24 hours of articles",
				ButtonSize: "btn-sm",
			})
		} else {
			<span class="text-xs text-warning">
				Add a feed to generate a new summary.
			</span>
		}
	</div>
}

// =======================
// Empty State (no summary)
// =======================
//
// Encourages the user to generate their first summary.
templ EmptyState(props EmptyStateProps) {
	if props.CanGenerate {
		@components.EmptyStateWithAction(components.EmptyStateWithActionProps{
			Icon:        "üìù",
			Title:       "No summary generated yet",
			Description: "Generate a daily summary to get a concise overview of the most recent content from your subscribed feeds.",
		}) {
			@GenerateSummaryAction(GenerateSummaryActionProps{
				ButtonText: "Generate Summary",
				AriaLabel:  "Generate your first AI summary",
				ButtonSize: "",
			})
		}
	} else {
		@components.EmptyState(components.EmptyStateProps{
			Icon:        "üìù",
			Title:       "No summary generated yet",
			Description: "Add a feed first, then return here to generate your first summary.",
		})
	}
}

// =============
// Error State
// =============
//
// Renders an error message with retry action. Assumes user can still generate.
templ Error(vm models.SummaryErrorViewModel) {
	@components.EmptyStateWithAction(components.EmptyStateWithActionProps{
		Icon:        "‚ö†Ô∏è",
		Title:       "Failed to generate summary",
		Description: vm.ErrorMessage,
	}) {
		@GenerateSummaryAction(GenerateSummaryActionProps{
			ButtonText: "Try Again",
			AriaLabel:  "Try generating the AI summary again",
			ButtonSize: "",
		})
	}
}

// sanitizeSummaryContent escapes any unsafe HTML to prevent injection.
// The content returned by AI should be treated as untrusted unless sanitized upstream.
func sanitizeSummaryContent(content string) string {
	return html.EscapeString(content)
}

// (Optional) Utility to produce relative time strings if needed in future enhancements.
func humanizeTime(t time.Time) string {
	if t.IsZero() {
		return ""
	}
	d := time.Since(t)
	switch {
	case d < time.Minute:
		return "just now"
	case d < time.Hour:
		return fmt.Sprintf("%d min ago", int(d.Minutes()))
	case d < 24*time.Hour:
		return fmt.Sprintf("%d hrs ago", int(d.Hours()))
	default:
		return t.Format("Jan 2, 2006 15:04")
	}
}
