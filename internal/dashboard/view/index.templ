package view

import (
	"github.com/tjanas94/vibefeeder/internal/dashboard/models"
	feedview "github.com/tjanas94/vibefeeder/internal/feed/view"
	"github.com/tjanas94/vibefeeder/internal/shared/view"
	"github.com/tjanas94/vibefeeder/internal/shared/view/components"
)

// Index renders the main dashboard page with feed list container and modal structures.
// All dynamic content (feeds, summary) is loaded via htmx from dedicated endpoints.
templ Index(vm models.DashboardViewModel) {
	@view.Layout(view.LayoutProps{Title: vm.Title}) {
		<!-- Dashboard container with Alpine.js state for modals and filters -->
		<div
			x-data="{
				openModal: null,
				hasFeeds: false,
				lastFocusedElement: null
			}"
			@close-modal.window="openModal = null; if(lastFocusedElement) { lastFocusedElement.focus(); lastFocusedElement = null; }"
			@open-modal.window="openModal = $event.detail.modal"
			@feeds-loaded.window="hasFeeds = $event.detail.hasFeeds"
		>
			<!-- Navbar with custom dashboard buttons -->
			@components.Navbar(components.NavbarProps{
				UserEmail: vm.UserEmail,
			}) {
				<!-- Disabled button with tooltip when no feeds -->
				<template x-if="!hasFeeds">
					@components.Tooltip(components.TooltipProps{
						Text:     "Add at least one feed to generate a summary",
						Position: "bottom",
					}) {
						<button class="btn btn-ghost hover:btn-neutral" disabled>
							Summary
						</button>
					}
				</template>
				<!-- Active button when feeds exist -->
				<button
					x-show="hasFeeds"
					class="btn btn-ghost hover:btn-neutral"
					@click="lastFocusedElement = $event.target"
					hx-get="/summaries/latest"
					hx-target="#summary-modal-content"
					hx-trigger="click"
				>
					Summary
				</button>
			}
			<!-- Main content area -->
			<main id="main-content" class="container mx-auto px-4 py-8 max-w-7xl">
				<h1 tabindex="-1" class="text-2xl font-bold mb-6">Dashboard</h1>
				<div class="space-y-6">
					<!-- Search and Filter Bar (stays here, not re-rendered by htmx) -->
					@feedview.FeedSearchFilter(feedview.FeedSearchFilterProps{
						Search: vm.Query.Search,
						Status: vm.Query.Status,
					})
					<!-- Status announcements for screen readers -->
					<div id="feed-results-status" class="sr-only" aria-live="polite"></div>
					<!-- Feed list container (updated by htmx) -->
					<div
						id="feed-list"
						class="min-h-[200px]"
						hx-get="/feeds"
						hx-trigger="load, refreshFeedList from:document"
						hx-include="#feed-filter-form"
					>
						<!-- Loading spinner shown while feed list loads -->
						@components.LoadingSpinner(components.LoadingSpinnerProps{Size: "lg"})
					</div>
				</div>
			</main>
			<!-- Summary Modal -->
			@components.Modal(components.ModalProps{
				ID:             "summary-modal",
				ContentID:      "summary-modal-content",
				AlpineStateVar: "openModal === 'summary'",
				MaxWidth:       "4xl",
			}) {
				<!-- Content loaded via htmx from navbar button -->
				@components.LoadingSpinner(components.LoadingSpinnerProps{Size: "lg"})
			}
			<!-- Feed Form Modal (for add/edit) -->
			@components.Modal(components.ModalProps{
				ID:             "feed-form-modal",
				ContentID:      "feed-form-modal-content",
				AlpineStateVar: "openModal === 'feed'",
				MaxWidth:       "2xl",
			}) {
				<!-- Content loaded via htmx (add/edit form) -->
				@components.LoadingSpinner(components.LoadingSpinnerProps{Size: "lg"})
			}
			<!-- Delete Confirmation Modal -->
			@components.Modal(components.ModalProps{
				ID:             "delete-confirmation-modal",
				ContentID:      "delete-confirmation-modal-content",
				AlpineStateVar: "openModal === 'delete'",
				MaxWidth:       "md",
			}) {
				<!-- Content loaded via htmx from delete button -->
				@components.LoadingSpinner(components.LoadingSpinnerProps{Size: "lg"})
			}
		</div>
		<script>
			// Focus management for modals after htmx loads content
			document.body.addEventListener("htmx:afterSwap", (event) => {
				const { target, requestConfig } = event.detail;
				if (requestConfig.verb !== "get") return;

				const focusMap = {
					"feed-form-modal-content": "#feed-name",
					"delete-confirmation-modal-content": "#delete-confirmation-modal-content .btn-ghost",
				};

				const selector = focusMap[target.id];
				if (selector) {
					setTimeout(() => {
						const element = document.querySelector(selector);
						if (element) {
							element.focus();
						}
					}, 50);
				}
			});
		</script>
	}
}
