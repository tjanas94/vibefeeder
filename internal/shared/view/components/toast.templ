package components

import "fmt"

// Toast renders a DaisyUI toast notification.
// Designed to be added/removed dynamically via Alpine.js.
// Automatically disappears after a configurable duration.
//
// Usage:
//   @components.Toast(components.ToastProps{
//       Type: "success",
//       Message: "Feed was added",
//   })
templ Toast(props ToastProps) {
	if props.UseOOB {
		<div id="toast-container" hx-swap-oob="beforeend">
			@toastContent(props)
		</div>
	} else {
		@toastContent(props)
	}
}

// toastContent renders the actual toast box with appropriate styling and close button
templ toastContent(props ToastProps) {
	<div
		class={ "alert", getToastTypeClass(props.Type), "shadow-lg" }
		x-data="{ show: true }"
		x-show="show"
		x-init={ "setTimeout(() => show = false, " + getToastDuration(props.Duration) + ")" }
		x-transition:enter="transition ease-out duration-300"
		x-transition:enter-start="opacity-0 translate-x-full"
		x-transition:enter-end="opacity-100 translate-x-0"
		x-transition:leave="transition ease-in duration-200"
		x-transition:leave-start="opacity-100 translate-x-0"
		x-transition:leave-end="opacity-0 translate-x-full"
	>
		@toastIcon(props.Type)
		<span class="flex-1">{ props.Message }</span>
		<button
			type="button"
			class="btn btn-sm btn-ghost btn-circle"
			@click="show = false"
			aria-label="Close notification"
		>
			<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
				<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
			</svg>
		</button>
	</div>
}

// toastIcon renders the appropriate SVG icon based on toast type
templ toastIcon(toastType string) {
	switch toastType {
		case "error":
			<svg aria-hidden="true" xmlns="http://www.w3.org/2000/svg" class="stroke-current shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24">
				<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
			</svg>
		case "success":
			<svg aria-hidden="true" xmlns="http://www.w3.org/2000/svg" class="stroke-current shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24">
				<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
			</svg>
		case "warning":
			<svg aria-hidden="true" xmlns="http://www.w3.org/2000/svg" class="stroke-current shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24">
				<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"></path>
			</svg>
		case "info":
			<svg aria-hidden="true" xmlns="http://www.w3.org/2000/svg" class="stroke-current shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24">
				<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
			</svg>
		default:
			<svg aria-hidden="true" xmlns="http://www.w3.org/2000/svg" class="stroke-current shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24">
				<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
			</svg>
	}
}

// getToastTypeClass returns the appropriate DaisyUI alert class for toast
func getToastTypeClass(toastType string) string {
	switch toastType {
	case "error":
		return "alert-error"
	case "success":
		return "alert-success"
	case "warning":
		return "alert-warning"
	case "info":
		return "alert-info"
	default:
		return "alert-info"
	}
}

// getToastDuration returns the duration in milliseconds as a string
func getToastDuration(duration int) string {
	if duration <= 0 {
		return "3000" // Default: 3 seconds
	}
	// Convert int to string properly
	return fmt.Sprintf("%d", duration)
}
