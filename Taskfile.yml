version: "3"

tasks:
  dev:
    desc: Run development environment
    deps:
      - build:js
      - build:icons
      - watch:css
      - watch:go

  build:
    desc: Build for production
    deps:
      - build:js
      - build:css
      - build:templ
      - build:icons
      - build:manifest
    cmd: go build -tags prod -o ./dist/vibefeeder ./cmd/vibefeeder
    sources:
      - cmd/**/*.go
      - internal/**/*.go
      - dist/static/**/*
      - go.mod
      - go.sum
    generates:
      - ./dist/vibefeeder

  build:manifest:
    desc: Generate asset manifest with content hashes for cache busting
    deps:
      - build:js
      - build:css
    cmd: go run cmd/gen-asset-manifest/main.go dist/static dist/manifest.json
    sources:
      - dist/static/**/*.css
      - dist/static/**/*.js
    generates:
      - dist/manifest.json

  rebuild:
    desc: Clean and build for production
    deps:
      - clean
    cmds:
      - task: build

  install-deps:
    desc: Install dependencies
    cmds:
      - npm install
      - go mod tidy

  install-deps:ci:
    desc: Install dependencies (CI - fast and deterministic)
    cmds:
      - npm ci --prefer-offline --no-audit --no-fund --ignore-scripts --loglevel error
      - go mod download

  run:
    desc: Run the built binary
    deps:
      - build
    cmd: ./dist/vibefeeder

  run:test:
    desc: Run the built binary with test configuration
    deps:
      - build
    cmd: ./dist/vibefeeder
    env:
      VIBEFEEDER_TEST: "true"

  clean:
    desc: Clean build artifacts
    cmds:
      - rm -rf dist/ tmp/
      - find . -name "*_templ.go" -type f -delete

  build:js:
    desc: Build JavaScript dependencies
    cmds:
      - mkdir -p dist/static/js
      - cp node_modules/htmx.org/dist/htmx.min.js dist/static/js/htmx.min.js
      - cp node_modules/alpinejs/dist/cdn.min.js dist/static/js/alpine.min.js
    sources:
      - node_modules/htmx.org/dist/htmx.min.js
      - node_modules/alpinejs/dist/cdn.min.js
    generates:
      - dist/static/js/htmx.min.js
      - dist/static/js/alpine.min.js

  build:icons:
    desc: Copy icons to dist root
    cmds:
      - mkdir -p dist
      - cp web/icons/* dist/
    sources:
      - web/icons/*
    generates:
      - dist/favicon.ico
      - dist/icon.svg
      - dist/apple-touch-icon.png

  build:css:
    desc: Build CSS with Tailwind
    cmd: node_modules/.bin/tailwindcss -i web/styles/main.css -o dist/static/css/main.css --minify
    sources:
      - web/styles/**/*.css
      - internal/**/*.templ
    generates:
      - dist/static/css/main.css

  build:templ:
    desc: Generate Go code from templ files
    cmd: templ generate
    sources:
      - internal/**/*.templ
    generates:
      - internal/**/*_templ.go

  watch:css:
    desc: Watch and build CSS with Tailwind
    cmd: node_modules/.bin/tailwindcss -i web/styles/main.css -o dist/static/css/main.css --watch

  watch:go:
    desc: Watch and build Go with Air
    cmds:
      - pkill -f air || true
      - air

  lint:
    desc: Run all linters
    deps:
      - lint:go
      - lint:eslint
      - lint:prettier
      - lint:typescript
      - lint:yaml

  lint:go:
    desc: Run Go linters
    cmd: golangci-lint run

  lint:yaml:
    desc: Lint YAML files
    cmd: yamllint .

  lint:eslint:
    desc: Run ESLint
    cmd: node_modules/.bin/eslint .

  lint:prettier:
    desc: Check formatting with Prettier
    cmd: node_modules/.bin/prettier --check .

  lint:typescript:
    desc: Check TypeScript types
    cmd: node_modules/.bin/tsc

  fmt:
    desc: Format all code
    deps:
      - fmt:go
      - fmt:templ
      - fmt:prettier

  fmt:go:
    desc: Format Go code
    cmd: goimports -w .

  fmt:templ:
    desc: Format Templ files
    cmd: templ fmt .

  fmt:prettier:
    desc: Format with Prettier
    cmd: node_modules/.bin/prettier --write .

  test:
    desc: Run all tests
    deps:
      - test:unit
      - test:e2e

  test:unit:
    desc: Run Go unit tests
    cmd: go test -v -race -coverprofile=coverage.out ./...

  test:unit:coverage:
    desc: Run unit tests and show coverage report
    deps:
      - test:unit
    cmd: go tool cover -html=coverage.out

  test:e2e:
    desc: Run Playwright E2E tests
    cmd: node_modules/.bin/playwright test

  test:e2e:headed:
    desc: Run Playwright E2E tests in headed mode
    cmd: node_modules/.bin/playwright test --headed

  test:e2e:ui:
    desc: Run Playwright E2E tests in UI mode
    cmd: node_modules/.bin/playwright test --ui

  test:e2e:debug:
    desc: Debug Playwright E2E tests
    cmd: node_modules/.bin/playwright test --debug

  test:e2e:report:
    desc: Show Playwright test report
    cmd: node_modules/.bin/playwright show-report
